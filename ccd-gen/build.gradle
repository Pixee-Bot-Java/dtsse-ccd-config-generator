/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
    id 'com.gradle.plugin-publish' version '0.10.1'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.12'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    testCompile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testCompile 'com.google.guava:guava:28.1-jre'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    testCompile group: 'commons-io', name: 'commons-io', version: '2.6'
    testCompile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.6.4'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.14.0'

    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'
    compile group: 'de.cronn', name: 'reflection-util', version: '2.4.1'
    compile group: 'org.objenesis', name: 'objenesis', version: '3.1'
    compile group: 'cglib', name: 'cglib', version: '3.3.0'
    compile group: 'net.jodah', name: 'typetools', version: '0.6.1'
    compile 'org.reflections:reflections:0.9.11'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    compile project(':ccd-sdk-types')
}

pluginBundle {
    website = 'https://github.com/banderous/ccd-sdk'
    vcsUrl = 'https://github.com/banderous/ccd-sdk'
    tags = ['hmcts']
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'hmcts.ccd.sdk'
            displayName = 'CCD Config Generator'
            description = 'Generate CCD Configuration from code'
            implementationClass = 'uk.gov.hmcts.ccd.sdk.CcdSdkPlugin'
        }
    }
}

compileJava {
    options.compilerArgs += ["-Werror"]
}

sourceSets {
  functionalTest {
  }
  types {

  }

  main {
    compileClasspath += types.compileClasspath + types.output
    runtimeClasspath += types.runtimeClasspath
  }
}

def input = rootProject.file('version.txt')
compileJava.inputs.file input
compileJava.doFirst {
    def props = file('src/main/resources/application.properties')
    def version = input.text
    props.text = "types.version=${version}"
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

functionalTest.mustRunAfter test
