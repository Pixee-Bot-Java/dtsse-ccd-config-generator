/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.0.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use JUnit test framework for unit tests
    testImplementation 'junit:junit:4.12'
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'
    testCompile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
    testCompile 'org.skyscreamer:jsonassert:1.5.0'
    testCompile 'com.google.guava:guava:28.1-jre'
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

    compile 'org.reflections:reflections:0.9.11'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    compile project(':ccd-sdk-types')
}

gradlePlugin {
    // Define the plugin
    plugins {
        greeting {
            id = 'ccd.sdk'
            implementationClass = 'ccd.sdk.CcdSdkPlugin'
        }
    }
}

// Add a source set for the functional test suite
sourceSets {
  functionalTest {
  }
  types {

  }
  main {
    compileClasspath += types.compileClasspath + types.output
    runtimeClasspath += types.runtimeClasspath
  }
}

gradlePlugin.testSourceSets(sourceSets.functionalTest)
configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)

// Add a task to run the functional tests
task functionalTest(type: Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
}

check {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

